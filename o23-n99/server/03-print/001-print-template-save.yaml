code: PrintTemplateSave
type: pipeline
route: /print/template/save
method: post

steps:
  - name: Wrap Request Data
    use: snippet
    snippet: "{data: $factor}"
  - name: Check And Redress Request Data
    use: snippet
    from-input: $factor.data
    snippet: |-
      if ($factor.templateCode == null || `${$factor.templateCode}`.trim().length === 0) {
        $.$error({status: 400, code: 'O99-10100', reason: 'Template code is required.'});
      }
      $factor.templateCode = `${$factor.templateCode}`.trim();
      if ($factor.templateName == null || `${$factor.templateName}`.trim().length === 0) {
        $.$error({status: 400, code: 'O99-10101', reason: 'Template name is required.'});
      }
      $factor.templateName = `${$factor.templateName}`.trim();
      if ($factor.templateType == null || `${$factor.templateType}`.trim().length === 0) {
        $.$error({status: 400, code: 'O99-10102', reason: 'Template type is required.'});
      }
      $factor.templateType = `${$factor.templateType}`.trim().toUpperCase();
      if (!['PDF', 'EXCEL', 'CSV', 'WORD'].includes($factor.templateType)) {
        $.$error({status: 400, code: 'O99-10103', reason: `Given template type[${$factor.templateType}] is not supported yet.`});
      }
  - name: Check Template Id Existing
    use: snippet
    from-input: $factor.data.templateId
    snippet: $factor == null || `${$factor}`.trim().length === 0
    merge: notExists
  - name: Save Template
    use: conditional
    check: $factor.notExists
    steps:
      - name: Create Snowflake Id
        use: snowflake
        merge: snowflakeId
      - name: Set Id to Template
        use: snippet
        snippet: |
          $factor.data.templateId = $factor.snowflakeId
      - name: Delete Snowflake from Context
        use: del-property
        property: snowflakeId
      - name: Complete Data
        use: snippet
        from-input: $factor.data
        snippet: |-
          $factor.enabled = $factor.enabled ?? true;
          $factor.version = 1;
          const currentUser = 'Anonymous'; // TODO get user from authentication
          const currentTime = $.$date.now();
          $factor.createdBy = currentUser;
          $factor.createdAt = currentTime;
          $factor.lastModifiedBy = currentUser;
          $factor.lastModifiedAt = currentTime;
      - name: Create Template
        use: typeorm-save
        from-input: "{values: $factor.data}"
        sql: |-
          INSERT INTO T_O23_PRINT_TEMPLATES
          (TEMPLATE_ID, TEMPLATE_CODE, TEMPLATE_NAME, ENABLED, DATA_PIPELINE, TENANT_CODE, VERSION, CREATED_AT, CREATED_BY, LAST_MODIFIED_AT, LAST_MODIFIED_BY)
          VALUES ($templateId, $templateCode, $templateName, $enabled.@bool, $dataPipeline.@json, $tenantCode, $version, $createdAt.@ts, $createdBy, $lastModifiedAt.@ts, $lastModifiedBy)
        to-output: "null"
    otherwise:
      - name: Find Existing Template
        use: typeorm-load-one
        from-input: "{params: $factor.data}"
        sql: SELECT TEMPLATE_CODE AS "TEMPLATE_CODE", TENANT_CODE AS "TENANT_CODE" FROM T_O23_PRINT_TEMPLATES WHERE TEMPLATE_ID = $templateId
        merge: existing
      - name: Check Existing
        use: snippet
        snippet: |-
          if ($factor.existing == null) {
            $.$error({status: 404, code: 'O99-10104', reason: 'Given template cannot match any record.'});
          }
          if ($factor.existing.TEMPLATE_CODE !== $factor.data.templateCode) {
            $.$error({status: 404, code: 'O99-10105', reason: 'Given template cannot match any record.'});
          }
          // tenant code might be null
          if ($factor.existing.TENANT_CODE != $factor.data.tenantCode) {
            $.$error({status: 404, code: 'O99-10106', reason: 'Given template cannot match any record.'});
          }
      - name: Complete Data
        use: snippet
        from-input: $factor.data
        snippet: |-
          $factor.enabled = $factor.enabled ?? true;
          const currentUser = 'Anonymous'; // TODO get user from authentication
          const currentTime = $.$date.now();
          $factor.lastModifiedBy = currentUser;
          $factor.lastModifiedAt = currentTime;
      - name: Update Template
        use: typeorm-save
        from-input: "{values: $factor.data}"
        sql: |-
          UPDATE T_O23_PRINT_TEMPLATES SET
          TEMPLATE_NAME = $templateName, ENABLED = $enabled.@bool, DATA_PIPELINE = $dataPipeline.@json, VERSION = VERSION + 1, LAST_MODIFIED_AT = $lastModifiedAt.@ts, LAST_MODIFIED_BY = $lastModifiedBy
          WHERE TEMPLATE_ID = $templateId AND VERSION = $version
        merge: affectedRows
      - name: Check Result
        use: conditional
        check: $factor.affectedRows === 1
        steps:
          - name: Increase Version
            use: snippet
            from-input: $factor.data
            snippet: |
              $factor.version = Number($factor.version) + 1
        otherwise:
          - name: Raise Exception
            use: snippet
            snippet: |-
              $.$error({status: 500, code: 'O99-10107', reason: 'Failed to update given template caused by unpredicted error occurred.'});
  - name: Return to Client
    use: get-property
    property: data
