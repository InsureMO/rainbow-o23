code: PrintTemplateSearch
type: pipeline
route: /print/template/search
method: post

steps:
  - name: Check Request Data
    use: snippet
    snippet: |-
      if ($factor.pageable == null) {
        $factor.pageable = {number: 1, size: 20};
      } else {
        if ($factor.pageable.number == null) {
          $factor.pageable.number = 1;
        }
        const number = Number($factor.pageable.number);
        if (isNaN(number) || number < 1) {
          $factor.pageable.number = 1;
        }
        if ($factor.pageable.size == null) {
          $factor.pageable.size = 20;
        }
        const size = Number($factor.pageable.size);
        if (isNaN(size)) {
          $factor.pageable.size = 20;
        } else if (size < 2) {
          $factor.pageable.size = 2;
        } else if (size > 200) {
          $factor.pageable.size = 200;
        }
      }
  - name: Build Where and Params
    use: snippet
    snippet: |-
      const criteria = $factor.criteria ?? {};
      const where = [];
      const params = {};
      if (criteria.code != null && criteria.code.trim().length !== 0) {
        where.push('TEMPLATE_CODE = $templateCode');
        params.templateCode = criteria.code.trim();
      }
      if (criteria.name != null && criteria.name.trim().length !== 0) {
        where.push('UPPER(TEMPLATE_NAME) LIKE $%templateName%');
        params.templateName = criteria.name.trim().toUpperCase();
      }
      if (criteria.type != null && criteria.type.trim().length !== 0) {
        where.push('TEMPLATE_TYPE = $templateType');
        params.templateType = criteria.type.trim().toUpperCase();
      }
      if (criteria.enabled != null) {
        where.push('ENABLED = $enabled.@bool');
        params.enabled = criteria.enabled ? true: false;
      }
      const fromSql = ' FROM T_O23_PRINT_TEMPLATES';
      let whereSql = '';
      if (where.length !== 0) {
        whereSql = ` WHERE ${where.join(' AND ')}`;
      }
      return {params, fwSQL: `${fromSql}${whereSql}`};
    merge: built
  - name: Build Count SQL
    use: snippet
    snippet: |-
      `SELECT COUNT(1) AS "itemCount" ${$factor.built.fwSQL}`
    merge: countSQL
  - name: Get Items Count
    use: typeorm-load-one
    sql: "@ignore"
    from-input: "{sql: $factor.countSQL, params: $factor.built.params}"
    to-output: "$result.itemCount"
    merge: itemCount
  - name: Compute Start Index
    use: snippet
    snippet: |-
      const size = $factor.pageable.size;
      return ($factor.pageable.number - 1) * size;
    merge: startIndex
  - name: Get Items
    use: snippet
    snippet: |-
      $factor.pageable.countOfItems = Number($factor.itemCount);
      $factor.pageable.countOfPages = Math.ceil($factor.pageable.countOfItems / $factor.pageable.size);
  - name: Search Templates
    use: conditional
    check: "$factor.startIndex >= $factor.pageable.countOfItems"
    steps:
      - name: No Data
        use: snippet
        snippet: "[]"
        merge: data
    otherwise:
      - name: Build Page Params
        use: snippet
        snippet: |-
          $factor.built.params.offset = $factor.startIndex;
          $factor.built.params.limit = $factor.pageable.size;
      - name: Build Data SQL
        use: snippet
        snippet: |-
          const columns = [
            'TEMPLATE_ID AS "templateId"',
            'TEMPLATE_CODE AS "templateCode"',
            'TEMPLATE_NAME AS "templateName"',
            'TEMPLATE_TYPE AS "templateType"',
            'ENABLED AS "enabled.@bool"',
            'TEMPLATE_FILE_NAME AS "templateFileName"',
            'TENANT_CODE AS "tenantCode"',
            'CREATED_AT AS "createdAt.@ts"',
            'CREATED_BY AS "createdBy"',
            'LAST_MODIFIED_AT AS "lastModifiedAt.@ts"',
            'LAST_MODIFIED_BY AS "lastModifiedBy"'
          ].join(', ');
          return `SELECT ${columns} ${$factor.built.fwSQL} ORDER BY TEMPLATE_NAME $.LIMIT($offset, $limit)`
        merge: dataSQL
      - name: Load Templates
        use: typeorm-load-many
        sql: "@ignore"
        from-input: "{sql: $factor.dataSQL, params: $factor.built.params}"
        merge: data
  - name: Return to Client
    use: snippet
    snippet: "{data: $factor.data, pageable: $factor.pageable}"
