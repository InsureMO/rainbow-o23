code: D9ConfigFindByCodeAndLang
name: Find D9 Config Code And Language
type: step-sets
use: sets

# consume: code and language
# produce: find leading configuration object

steps:
  - name: Check Request Data
    use: snippet
    snippet: |-
      const code = `${$factor.code ?? ''}`.trim();
      const hasCode = code.length !== 0;
      if (!hasCode) {
        $.$error({status: 400, code: 'O99-10212', reason: 'D9 configuration code is required.'});
      }
      if (hasCode) {
        $factor.code = code;
      } else {
        delete $factor.code;
      }
      const language = `${$factor.language ?? ''}`.trim();
      if (language === '') {
        $factor.languages = ['en'];
      } else {
        const langs = language.split('_');
        $factor.languages = [];
        for (let use = langs.length; use >= 1; use--) {
          $factor.languages.push(langs.slice(0, use).join('_'));
        }
        if ($factor.languages[$factor.languages.length - 1] !== 'en') {
          $factor.languages.push('en');
        }
      }
  - name: Find Configurations
    use: typeorm-load-many
    from-input: "{params: $factor}"
    sql: |-
      SELECT 
        CONFIG_ID AS "configId",
        CONFIG_CODE AS "configCode",
        CONFIG_NAME AS "configName",
        CONFIG_TYPE AS "configType",
        LANGUAGE AS "language",
        ENABLED AS "enabled.@bool",
        CONFIG AS "config.@json",
        DATA_PIPELINE AS "dataPipeline.@json",
        TENANT_CODE AS "tenantCode"
      FROM T_O23_D9_CONFIG WHERE CONFIG_CODE = $code AND LANGUAGE IN ($...languages)
    merge: configurations
  - name: Check Configurations
    use: snippet
    snippet: |-
      if ($factor.configurations == null || $factor.configurations.length === 0) {
        $.$error({status: 404, code: 'O99-10213', reason: `D9 configuration[code=${$factor.code ?? ''}, language=${($factor.languages ?? []).join(', ')}] not found.`});
      }
  - name: Sort Configurations
    use: snippet
    snippet: |-
      return $factor.configurations.sort((a, b) => {
        if (a.language === 'en') {
          return 1;
        } else if (b.language === 'en') {
          return -1;
        } else {
          return a.language.localCompare(b.language);
        }
      });
    merge: configurations
  - name: Find Proper Configuration
    use: snippet
    snippet: "$factor.configurations.find(config => config.enabled === true)"
    merge: configuration
  - name: Check Found Configuration
    use: snippet
    snippet: |-
      if ($factor.configuration == null) {
        $.$error({status: 406, code: 'O99-10214', reason: `D9 configuration[code=${$factor.code ?? ''}, language=${($factor.languages ?? []).join(', ')}] is disabled.`});
      }
  - name: Redress Configuration
    use: snippet
    snippet: |
      delete $factor.configuration.enabled;
  - name: Set Configurations
    use: snippet
    snippet: "[$factor.configuration]"
    merge: configurations
