code: D9ConfigSave
type: pipeline
route: /d9/config/save
method: post

steps:
  - name: Wrap Request Data
    use: snippet
    snippet: "{data: $factor}"
  - name: Check And Redress Request Data
    use: snippet
    from-input: $factor.data
    snippet: |-
      if ($.isBlank($factor.configCode)) {
        $.$error({status: 400, code: 'O99-10200', reason: 'D9 configuration code is required.'});
      }
      $factor.configCode = $.trim($factor.configCode);
      if ($.isBlank($factor.configName)) {
        $.$error({status: 400, code: 'O99-10201', reason: 'D9 configuration name is required.'});
      }
      $factor.configName = $.trim($factor.configName);
      if ($.isBlank($factor.configType)) {
        $.$error({status: 400, code: 'O99-10202', reason: 'D9 configuration type is required.'});
      }
      $factor.configType = $.trim($factor.configType).toUpperCase();
      if (!['PAGE', 'TABS', 'TAB', 'DIALOG'].includes($factor.configType)) {
        $.$error({status: 400, code: 'O99-10203', reason: `Given configuration type[${$factor.configType}] is not supported yet.`});
      }
  - name: Check Config Id Existing
    use: snippet
    from-input: $factor.data.configId
    snippet: $factor == null || `${$factor}`.trim().length === 0
    merge: notExists
  - name: Save Configuration
    use: conditional
    check: $factor.notExists
    steps:
      - name: Create Snowflake Id
        use: snowflake
        merge: snowflakeId
      - name: Set Id to Configuration
        use: snippet
        snippet: |
          $factor.data.configId = $factor.snowflakeId
      - name: Delete Snowflake from Context
        use: del-property
        property: snowflakeId
      - name: Complete Data
        use: snippet
        from-input: $factor.data
        snippet: |-
          $factor.enabled = $factor.enabled ?? true;
          $factor.version = 1;
          const currentUser = 'Anonymous'; // TODO get user from authentication
          const currentTime = $.$date.now();
          $factor.createdBy = currentUser;
          $factor.createdAt = currentTime;
          $factor.lastModifiedBy = currentUser;
          $factor.lastModifiedAt = currentTime;
      - name: Create Configuration
        use: typeorm-save
        from-input: "{values: $factor.data}"
        sql: |-
          INSERT INTO T_O23_D9_CONFIG
          (CONFIG_ID, CONFIG_CODE, CONFIG_NAME, CONFIG_TYPE, LANGUAGE, ENABLED, CONFIG, DATA_PIPELINE, TENANT_CODE, VERSION, CREATED_AT, CREATED_BY, LAST_MODIFIED_AT, LAST_MODIFIED_BY)
          VALUES ($configId, $configCode, $configName, $configType, $language, $enabled.@bool, $config.@json, $dataPipeline.@json, $tenantCode, $version, $createdAt.@ts, $createdBy, $lastModifiedAt.@ts, $lastModifiedBy)
        to-output: "null"
    otherwise:
      - name: Find Existing Config
        use: typeorm-load-one
        from-input: "{params: $factor.data}"
        sql: SELECT CONFIG_CODE AS "CONFIG_CODE", TENANT_CODE AS "TENANT_CODE" FROM T_O23_D9_CONFIG WHERE CONFIG_ID = $configId
        merge: existing
      - name: Check Existing
        use: snippet
        snippet: |-
          if ($factor.existing == null) {
            $.$error({status: 404, code: 'O99-10204', reason: 'Given d9 configuration cannot match any record.'});
          }
          if ($factor.existing.CONFIG_CODE !== $factor.data.configCode) {
            $.$error({status: 404, code: 'O99-10205', reason: 'Given d9 configuration cannot match any record.'});
          }
          // tenant code might be null
          if ($factor.existing.TENANT_CODE != $factor.data.tenantCode) {
            $.$error({status: 404, code: 'O99-10206', reason: 'Given d9 configuration cannot match any record.'});
          }
      - name: Complete Data
        use: snippet
        from-input: $factor.data
        snippet: |-
          $factor.enabled = $factor.enabled ?? true;
          const currentUser = 'Anonymous'; // TODO get user from authentication
          const currentTime = $.$date.now();
          $factor.lastModifiedBy = currentUser;
          $factor.lastModifiedAt = currentTime;
      - name: Update Configuration
        use: typeorm-save
        from-input: "{values: $factor.data}"
        sql: |-
          UPDATE T_O23_D9_CONFIG SET
          CONFIG_NAME = $configName, CONFIG_TYPE = $configType, LANGUAGE = $language, ENABLED = $enabled.@bool, 
          CONFIG = $config, DATA_PIPELINE = $dataPipeline, 
          VERSION = VERSION + 1, LAST_MODIFIED_AT = $lastModifiedAt.@ts, LAST_MODIFIED_BY = $lastModifiedBy
          WHERE CONFIG_ID = $configId AND VERSION = $version
        merge: affectedRows
      - name: Check Result
        use: conditional
        check: $factor.affectedRows === 1
        steps:
          - name: Increase Version
            use: snippet
            from-input: $factor.data
            snippet: |
              $factor.version = Number($factor.version) + 1
        otherwise:
          - name: Raise Exception
            use: snippet
            snippet: |-
              $.$error({status: 500, code: 'O99-10207', reason: 'Failed to update given d9 configuration caused by unpredicted error occurred.'});
  - name: Return to Client
    use: get-property
    property: data
