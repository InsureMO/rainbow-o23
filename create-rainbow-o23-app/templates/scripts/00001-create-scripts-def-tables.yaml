code: CreateScriptsDefTables
type: pipeline

steps:
  - name: Detect DB Type
    use: snippet
    snippet: |-
      const name = $.$config.getString('app.datasource.config', $.$config.getString('app.datasource.default', 'o23'));
      $.$logger.log(`Application configuration datasource[${name}].`, 'ScriptsPipelineInitializer')
      const type = $.$config.getString(`typeorm.${name}.type`);
      $.$logger.log(`Application configuration datasource type[${type}].`, 'ScriptsPipelineInitializer')
      return {name, type};
    merge: db
  - name: Run By DB Type
    use: routes
    from-input: $factor.db
    routes:
      - check: $factor.type === 'mysql'
        steps:
          - name: Run MySQL
            use: ref-step
            code: ExecuteScriptsMySQL
      - check: $factor.type === 'pgsql'
        steps:
          - name: Run PgSQL
            use: ref-step
            code: ExecuteScriptsPgSQL
      - check: $factor.type === 'mssql'
        steps:
          - name: Run MsSQL
            use: ref-step
            code: ExecuteScriptsMSSQL
      - check: $factor.type === 'oracle'
        steps:
          - name: Run Oracle
            use: ref-step
            code: ExecuteScriptsOracle
    otherwise:
      - name: DB Type Mismatched
        use: snippet
        snippet: throw new Error(`Datasource type[${$factor.db.type}] is not supported.`);
