code: ExecuteScriptsMySQL
type: step-sets
use: sets

steps:
  - name: Check Existing
    use: typeorm-snippet
    datasource: "env:app.datasource.config"
    snippet: |-
      try {
        const [rows] = await $runner.query('SELECT COUNT(1) AS ROWS_COUNT FROM T_O23_DB_CHANGE_LOCK');
        $.$logger.log(`Total ${rows.ROWS_COUNT} rows(s) found in T_O23_DB_CHANGE_LOCK.`, 'ScriptsPipelineInitializer');
        return true;
      } catch {
        $.$logger.log('T_O23_DB_CHANGE_LOCK not found.', 'ScriptsPipelineInitializer');
        return false;
      }
    merge: exists
  - name: Create If Not Exists
    use: conditional
    check: $factor.exists === false
    steps:
      - name: Create Lock
        use: typeorm-snippet
        datasource: "env:app.datasource.config"
        snippet: |-
          await $runner.query(`CREATE TABLE T_O23_DB_CHANGE_LOCK(
            ID BIGINT NOT NULL PRIMARY KEY,
            LOCKED TINYINT NOT NULL DEFAULT 0,
            LOCKED_AT DATETIME NULL,
            LOCKED_BY VARCHAR(64) NULL)`);
          await $runner.query(`CREATE TABLE T_O23_DB_CHANGE_LOG(
            ID BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
            AUTHOR VARCHAR(64) NOT NULL,
            FILE_NAME VARCHAR(255) NOT NULL,
            DATE_EXECUTED DATETIME NOT NULL,
            CONTENT MEDIUMTEXT NULL,
            MD5_SUM VARCHAR(36) NOT NULL,
            CONTEXTS VARCHAR(128) NULL,
            DEPLOYMENT_TAG VARCHAR(64) NULL)`);
          await $runner.query('INSERT INTO T_O23_DB_CHANGE_LOCK(ID, LOCKED, LOCKED_AT, LOCKED_BY) VALUES (1, 0, NULL, NULL)');
          $.$logger.log('O23 scripts def tables created.', 'ScriptsPipelineInitializer');
  - name: Try to Lock
    use: typeorm-snippet
    datasource: "env:app.datasource.config"
    snippet: |-
      const {changedRows} = await $runner.query("UPDATE T_O23_DB_CHANGE_LOCK SET LOCKED = 1, LOCKED_AT = NOW(), LOCKED_BY = 'SCRIPTS-PIPELINE' WHERE ID = 1 AND LOCKED != 1");
      // $.$logger.log(changedRows, 'ScriptsPipelineInitializer');
      if (changedRows === 1) {
        $.$logger.log(`Locked, ${changedRows} row(s) affected.`, 'ScriptsPipelineInitializer');
        return true;
      }
      try {
        const {affectedRows} = await $runner.query("INSERT INTO T_O23_DB_CHANGE_LOCK(ID, LOCKED, LOCKED_AT, LOCKED_BY) VALUES (1, 1, NOW(), 'SCRIPTS-PIPELINE')");
        // $.$logger.log(affectedRows, 'ScriptsPipelineInitializer');
        $.$logger.log(`Lock created, ${affectedRows} row(s) affected.`, 'ScriptsPipelineInitializer');
        return true;
      } catch (e) {
        $.$logger.log('The O23 scripts pipeline failed to acquire the lock to start script execution, possibly due to ongoing execution elsewhere or the previous lock not being released properly.', 'ScriptsPipelineInitializer');
        $.$logger.error(e, 'ScriptsPipelineInitializer');
        return false;
      }
    merge: locked
  - name: Scripts Execution
    use: conditional
    check: $factor.locked
    steps:
      - name: Load Scripts
        use: scripts-load-files
        dir: "env:app.db.scripts.dir"
        from-input: $factor.db.type
      - name: Execute Scripts
        use: each
        steps:
          - name: Execute Script
            use: typeorm-snippet
            datasource: "env:app.datasource.config"
            snippet: |-
              const $item = $factor.$item;
              const rst = await $runner.query("SELECT MD5_SUM FROM T_O23_DB_CHANGE_LOG WHERE FILE_NAME = ?", [$item.filename]);
              if (rst == null || rst.length === 0) {
                // not found, execute scripts
                try {
                  // use transaction when it is dml
                  if (!$item.ddl) {
                    await $runner.startTransaction();
                  }
                  await $runner.query($item.sql);
                  await $runner.query(
                    "INSERT INTO T_O23_DB_CHANGE_LOG(AUTHOR, FILE_NAME, DATE_EXECUTED, CONTENT, MD5_SUM, CONTEXTS, DEPLOYMENT_TAG) VALUES (?, ?, NOW(), ?, ?, NULL, ?)",
                    [$item.author || 'Anonymous', $item.filename, $item.content, $item.md5, $item.deploymentTag]);
                  if (!$item.ddl) {
                    await $runner.commitTransaction();
                  }
                  $.$logger.log(`Script[${$item.filename}] executed, with md5[${$item.md5}].`, 'ScriptsPipelineInitializer');
                } catch (e) {
                  if (!$item.ddl) {
                    try {
                      await $runner.rollbackTransaction();
                    } catch {
                      // ignore this
                    }
                  }
                  $.$logger.error(`Failed on execute script[${$item.filename}].`, 'ScriptsPipelineInitializer')
                  $.$logger.error(e, 'ScriptsPipelineInitializer');
                  // return a break semaphore
                  return $factor.$semaphore;
                }
              } else if (rst[0].MD5_SUM !== $item.md5) {
                $.$logger.error(`Script[${$item.filename}] md5 changed[existing=${rst[0].MD5_SUM}, current=${$item.md5}].`, 'ScriptsPipelineInitializer');
                // return a break semaphore
                return $factor.$semaphore;
              } else {
                $.$logger.log(`Script[${$item.filename}] already executed, with md5[${$item.md5}].`, 'ScriptsPipelineInitializer');
              }
      - name: Unlock
        use: typeorm-save
        datasource: "env:app.datasource.config"
        # no params for sql
        from-input: "null"
        sql: UPDATE T_O23_DB_CHANGE_LOCK SET LOCKED = 0 WHERE ID = 1
      - name: Accomplished
        use: snippet
        snippet: $.$logger.log(`MySQL scripts execution accomplished.`, 'ScriptsPipelineInitializer');